
OPEN (file *fd) {

	compruebo si es consumidor o productor mirando la estructura de apertura
	bloqueo, cojo mutex
	si es consumidor
			incremento el número de consumidores
			despierto a algún productor a la espera
			espero a que haya algún productor. variable condicional
		libero, dejo mutex
	si es productor
			incremento el número de productores
			despierto a algún consumidor a la espera
			espero a que haya algún consumidor, variable condicional
		libero, dejo mutex
	fin si
}

RELEASE (file fd*) {

	compruebo si es productor o consumidor mirando la opción de apertura de fd
	si es consumidor
		bloqueo, cojo mutex
			reduzco el número de consumidores
			si no hay productores ni consumidores vacío el buffer
		linero, dejo el mutex
	si es productor
		bloqueo, cojo el mutex
			reduzco el número de productores
			si no hay productores ni consumidores vacío el buffer
		libero, dejo el mutex
	fin sis
}

READ (void* user_buf, int len,loff_t *off) {

	miro si el buffer puede albergar suficientes datos

	bloqueo, cojo mutex

		espero a que hay algo que leer en el buffer, variable condicional consumidor
		compruebo fin de comunicación
		extraigo datos
		despierto a un productor si hay alguno esperando

	libero, dejo mutex

	copio los datos al espacio de usuario

	actualizo off

	devuelvo el número de bytes leídos
}

WRITE (void* user_buf, int len,loff_t *off) {

	miro si los datos caben en el buffer
	copio los datos del espacio de usuario

	bloqueo, cojo mutex

		espero a que haya espacio suficiente en el buffer, variable condicional productor
		compruebo si hay fin de comunicación
		inserto datos
		despierto a un consumidor si hay alguno esperando

	libero, dejo mutex

	actualizo off

	devuelvo el número de bytes escritos
}
